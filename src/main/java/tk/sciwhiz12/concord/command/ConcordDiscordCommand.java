package tk.sciwhiz12.concord.command;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.events.interaction.SlashCommandEvent;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.util.Mth;
import tk.sciwhiz12.concord.Concord;
import tk.sciwhiz12.concord.command.discord.CommandDispatcher;

import java.awt.*;
import java.time.Instant;

/**
 * The Discord command hub.
 *
 * Has several sub-commands, some of which are usable by everyone:
 *  - list; lists players on the connected server.
 *  - tps; displays ticks per second in a format similar to /forge tps.
 *  - help; displays help autogenerated from the registered commands.
 * Some commands are only usable by administrators:
 *  - kick <user> [reason]; remove a user from the server, optionally with the specified reason.
 *  - ban <user> [reason]; ban a user from the server, optionally with the specified reason.
 *  - whitelist <remove|add> <user>; add or remove a user from the server's whitelist.
 *  - stop; stop and shutdown the connected server. Disabled on singleplayer worlds.
 *
 * @author Curle
 */
public class ConcordDiscordCommand {
    private static JDA bot;
    private static MinecraftServer server;

    private static void listCommand(SlashCommandEvent listEvent) {
        listEvent.replyEmbeds(new EmbedBuilder()
                .setTitle("Concord Integrations")
                .setDescription("There are currently " + server.getPlayerCount() + " people online.")
                .addField("Online Players", String.join("\n", server.getPlayerNames()), false)
                .setTimestamp(Instant.now())
                .setColor(Color.CYAN)
                .build()
        ).setEphemeral(true).queue();
    }

    private static void tpsCommand(SlashCommandEvent tpsEvent) {
        double meanTickTime = Mth.average(server.tickTimes);
        double meanTPS = Math.min(1000.0/meanTickTime, 20);

        StringBuilder builder = new StringBuilder();

        for (ServerLevel dim : server.getAllLevels()) {
            long[] times = server.getTickTime(dim.dimension());

            if (times == null)
                times = new long[]{0};

            double worldTickTime = Mth.average(times);
            double worldTPS = Math.min(1000.0 / worldTickTime, 20);

            builder.append(dim.dimension().location()).append(": Mean tick time: ").append(worldTickTime).append(" ms. Mean TPS: ").append(worldTPS).append("\n");
        }

        tpsEvent.replyEmbeds(new EmbedBuilder()
                .setTitle("TPS Performance Report")
                .setDescription("Overall performance: Mean tick time: " + meanTickTime + " ms. Mean TPS: " + meanTPS)
                .addField("Performance per dimension", builder.toString(), false)
                .setColor(Color.ORANGE)
                .setTimestamp(Instant.now())
                .build()
        ).setEphemeral(true).queue();
    }

    private static void helpCommand(SlashCommandEvent helpEvent) {
        // TODO
    }

    public static void initialize(CommandDispatcher dispatcher) {
        dispatcher.registerSingle("list", "List all online users.", "Show a count of online users, and their names.", ConcordDiscordCommand::listCommand);
        dispatcher.registerSingle("tps", "Show the performance of the server.", "Display a breakdown of server performance, in current, average and separated by dimension.", ConcordDiscordCommand::tpsCommand);
        dispatcher.registerSingle("help", "Show detailed information about every single available command.", "Show the help information you are currently reading.", ConcordDiscordCommand::helpCommand);
    }

    public static void postInit() {
        bot = Concord.BOT.getDiscord();
        server = Concord.BOT.getServer();
    }
}
